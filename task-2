Create a directory for your server:
mkdir -p ~/express-server
cd ~/express-server
npm init -y
npm install express

Create a server.js file:
nano server.js

javascript:
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/', (req, res) => {
    res.send('Hello, World!');
});

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

Create a Systemd Service File
sudo nano /etc/systemd/system/express-server.service

ini

[Unit]
Description=Express Web Server
After=network.target

[Service]
ExecStart=/usr/bin/node /home/your-username/express-server/server.js
Restart=always
User=your-username
Group=your-username
Environment=PATH=/usr/bin
WorkingDirectory=/home/your-username/express-server
[Install]
WantedBy=multi-user.target


1.4 Reload Systemd & Start the Service
sudo systemctl daemon-reload
sudo systemctl start express-server
sudo systemctl enable express-server

1.5 Check Service Status
sudo systemctl status express-server

Kernel tuning :
Modify Kernel Parameter :

sudo nano /etc/sysctl.conf

net.core.somaxconn = 1024

Apply Changes:
sudo sysctl -p

Verify:

sysctl net.core.somaxconn

should return :

net.core.somaxconn = 1024


Task 3:

Allow Only HTTP/HTTPS:
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp

Block All Other Incoming Connections:
sudo ufw default deny incoming
sudo ufw default allow outgoing

Enable UFW:
sudo ufw enable

Check Firewall Status:
 
sudo ufw status verbose

Task-2 Bash Scripting :

1.1 Create the Script

nano ~/health_check.sh

bash:
#!/bin/bash

SERVICE="express-server"
LOGFILE="/var/log/express-health.log"

# Check if the service is running
if ! systemctl is-active --quiet $SERVICE; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $SERVICE was down. Restarting..." | tee -a $LOGFILE
    sudo systemctl restart $SERVICE
else
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $SERVICE is running fine." | tee -a $LOGFILE
fi

1.2 Make the Script Executable:

chmod +x ~/health_check.sh

1.3 Run the Script Manually

~/health_check.sh

1.4 Automate with Cron (Runs Every 5 Minutes:
crontab -e
add this line
*/5 * * * * /home/mustafa/health_check.sh

2. Log Analysis Script:

2.1 Create a Sample Log File:

nano ~/webserver.log

192.168.1.10 - - [26/Feb/2025:12:30:10] "GET /index.html HTTP/1.1" 200
192.168.1.15 - - [26/Feb/2025:12:30:11] "POST /login HTTP/1.1" 302
192.168.1.10 - - [26/Feb/2025:12:30:12] "GET /dashboard HTTP/1.1" 200
192.168.1.20 - - [26/Feb/2025:12:30:13] "GET /about.html HTTP/1.1" 200
192.168.1.10 - - [26/Feb/2025:12:30:14] "GET /profile HTTP/1.1" 200
192.168.1.20 - - [26/Feb/2025:12:30:15] "GET /home HTTP/1.1" 200
192.168.1.15 - - [26/Feb/2025:12:30:16] "GET /contact HTTP/1.1" 200

2.2 Create the Log Analysis Script:
nano ~/log_analysis.sh

bash:
#!/bin/bash

LOGFILE="~/webserver.log"

echo "Top 3 IP addresses with the most requests:"
awk '{print $1}' $LOGFILE | sort | uniq -c | sort -nr | head -3


2.3 Make the Script Executable:

bash:
chmod +x ~/log_analysis.sh

2.4 Run the Script:

~/log_analysis.sh


